kubeadm config images list --kubernetes-version $k8s_version | xargs -n1 -P0 ctr -n k8s.io images pull
kubeadm init --apiserver-advertise-address=$(hostname -i) --pod-network-cidr=10.244.0.0/16 --kubernetes-version $k8s_version
mkdir /root/.kube
cp /etc/kubernetes/admin.conf /root/.kube/config
#
# wait for API server to come up
sleep 5
echo "Waiting on kube api"
readiness="https://localhost:6443/readyz"
expected_response="ok"

while true; do
    response=$(curl -k -s "$readiness")
    if [ "$response" = "$expected_response" ]; then
        echo "kube api is ready!"
        break
    fi
    echo "kube api not ready. Waiting 5 seconds..."
    sleep 5
done
# label node
kubectl label node $(hostname) node-role.kubernetes.io/master=master

echo "Applying Flannel"
kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v0.25.1/Documentation/kube-flannel.yml
kubectl config set-context --current --namespace=default

# on aws ec2 install aws-load-balancer-controller
if [ $cloud = aws ] && [ $platform != eks ] && [ $platform != ocp4 ]; then
    echo "Applying aws-eks-load-balancer-controller"
    helm repo add eks https://aws.github.io/eks-charts
    helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --version 1.14.0 --set clusterName=dpaul-test --set feature-gates=ServiceTypeLoadBalancerOnly=true --wait
    kubectl patch deployment aws-load-balancer-controller -n kube-system --type "json" -p '[{"op":"add","path":"/spec/template/spec/containers/0/args/-","value":"--default-load-balancer-scheme=internet-facing"}]'
fi