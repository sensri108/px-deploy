# Configure user directories
mv /assets/training /etc/skel
mkdir /etc/skel/.kube
cat <<EOF >>/etc/skel/.bashrc
alias k=kubectl
complete -F __start_kubectl k
PS1='\e[0;33m[\u@px-training \W]\$ \e[m'
EOF
curl -o /etc/skel/training/03-Installation/px-operator.yml "https://install.portworx.com/$px_version?comp=pxoperator&kbver=$k8s_version&ns=portworx"
curl "https://install.portworx.com/$px_version?operator=true&mc=false&kbver=$k8s_version&ns=portworx&b=true&c=px-cluster&stork=true&csi=true&mon=true&tel=true&st=k8s&promop=true" | grep -v install.portworx.com >/etc/skel/training/03-Installation/px.yml

# Create training users
for i in $(seq 1 $clusters); do
  useradd training$i
  passwd --stdin training$i <<<portworx
  chmod 755 /home/training$i
done

# Install storkctl and pxctl
stork_image=docker.io/$(curl -s https://install.portworx.com/$px_version/version?kbver=$k8s_version | awk '/stork/{print$2}')
container=$(docker create $stork_image)
docker cp $container:/storkctl/linux/storkctl /usr/bin
docker rm $container
cp /assets/pxctl.sh /usr/bin/pxctl
chmod 755 /usr/bin/storkctl /usr/bin/pxctl
storkctl completion bash >/etc/bash_completion.d/storkctl

# Collect kubeconfigs
for i in $(seq 1 $clusters); do
  echo trying to copy kubeconfig from cluster $i
  while ! scp master-$i:.kube/config /home/training$i/.kube/config; do
    sleep 2
  done
  cp /root/.kube/config /home/training$i/training/kubeconfig.target
  chown training$i.training$i /home/training$i/.kube/config /home/training$i/training/kubeconfig.target
done

# Install Portworx on cluster 1
kubectl apply -f /home/training1/training/03-Installation/px-operator.yml
while ! kubectl wait --for=condition=ready pod -lname=portworx-operator -n portworx; do
  sleep 2
done
while ! kubectl apply -f /home/training1/training/03-Installation/px.yml; do
  sleep 2
done
